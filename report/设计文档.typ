#import "report-template.typ": *

#show: project.with(
  verbose: false,
  title: "设计文档",
  before-title: "第一部分"
)

= 引言

== 编写目的

这个项目是2023-2024秋冬学期《B/S体系软件设计》的一项重要课程项目，旨在开发一个功能强大的物联网应用网站。用户登录后，能够轻松修改个人信息和物联网设备的配置信息，同时查看设备信息的可视化界面，包括设备的运动轨迹和统计数据。这个网站不仅要用户友好，而且要适配手机移动端，确保在手机浏览器和内置于应用程序（如微信）的浏览器中都能够良好地展示。此外，项目还需要提供详尽的软件项目文档，以帮助开发者了解并掌握一整套 web 应用开发技术以及整个开发流程。

这份文档是项目的系统设计文档，包含了系统的需求分析、总体架构设计、数据库设计、系统接口、以及界面原型的设计等内容。它详细描述了物联网设备应用网站的设计细节。这个项目的范围涵盖了完整的 web 前后端开发、MQTT 服务器的搭建，以及相关项目文档的编写，而且整个项目将由单一开发者独立完成。

== 项目背景

物联网（IoT，Internet of Things）是一种强大的概念，它将各种信息传感设备与互联网相连接，形成一个庞大的网络，使得人、机、物在任何时间、任何地点都可以互相连接和互通。

物联网的应用领域广泛涵盖了工业、农业、环境、交通、物流、安全等基础设施领域。它在这些领域的应用有效地推动了智能化发展，使得资源的分配更加合理，提高了行业的效率和效益。此外，在家居、医疗健康、教育、金融服务、旅游等与日常生活密切相关的领域，物联网也带来了革命性的改进。这些改进涵盖了服务的范围、方式以及服务质量的提升，显著提高了人们的生活质量。

本网站作为一个物联网应用网站，采用了B/S结构的设计，旨在实现物联网的基本功能，包括接收和统计分析指定物联网终端的数据。这个网站将为用户提供方便的接入和数据分析功能，为物联网的应用提供了有力的支持。

= 系统需求分析

== 实验要求

需要实现的基本功能如下：

1. 搭建一个 mqtt 服务器，能够接收指定的物联网终端模拟器发送的数据。
2. 实现用户注册、登录功能，用户注册时需要填写必要的信息并验证，如用户名、密码要求在6字节以上，email 的格式验证，并保证用户名和 email 在系统中唯一，用户登录后可以进行以下操作。
3. 提供设备配置界面，可以创建或修改设备信息，包含必要信息，如设备ID、设备名称等。
4. 提供设备上报数据的查询统计界面。
5. 提供地图界面展示设备信息，区分正常和告警信息，并可以展示历史轨迹。
6. 首页提供统计信息（设备总量、在线总量、接收的数据量等），以图表方式展示（柱状体、折线图等）

增强功能：

7. 样式适配手机端，能够在手机浏览器/微信等应用内置的浏览器中友好显示。

== 功能需求分析

该项目主要是一个 B/S 架构的 Web 应用，对于每个用户，它提供了以下功能：

- 用户注册与登录（用户管理）
- 用户信息修改
- 设备位置信息查看（可视化界面、显示设备的运动轨迹）
- 设备配置信息修改
- 设备统计数据查看（可视化界面、显示基于图标的统计信息）

同时，该项目还需要搭建一个 MQTT 服务器，用于接收物联网终端模拟器发送的数据。

=== 用户模块需求分析

用户模块是整个系统的核心模块，它负责用户的注册、登录、注销、信息修改等功能。用户可以通过注册功能创建一个新的账户，然后通过登录功能登录到系统中。在登录后，用户可以修改自己的个人信息，包括用户名、密码、邮箱等。此外，用户还可以注销自己的账户，以退出系统。具体来说，用户模块需要实现以下功能：

- 用户登录：对用户的密码进行加密，然后将其与数据库中的密码进行比较，以验证用户的身份。如果验证通过，就允许用户登录，否则就提示用户登录失败。
- 用户注册：需要邮箱、用户名、密码等信息，其中用户名和邮箱是唯一的，这意味着用户名和邮箱在系统中不能重复。此外，密码需要经过加密，以确保用户的密码不会被泄露。
- 验证注册信息：密码需要在6字节以上，email 的格式验证，并保证用户名和 email 在系统中唯一。
- 用户注销：用户可以通过注销功能退出系统，以确保用户的账户安全。
- 用户信息修改：用户可以修改自己的个人信息，包括用户名、密码、邮箱等。
- 删除账户：用户可以删除自己的账户。

=== 设备信息展示模块需求分析

设备信息展示模块负责展示设备的位置信息，包括设备的运动轨迹和统计数据。用户可以通过这个模块查看设备的位置信息，以及设备的统计数据。具体来说，设备信息展示模块需要实现以下功能：

- 设备信息展示：用户可以通过这个模块查看设备的相关信息，包括设备名称、设备类型、设备位置、设备工作状态、设备消息等。
- 设备信息查询：用户可根据设备名称等标识符查询设备信息。
- 设备信息地图展示：用户可以通过这个模块查看设备的位置信息，以及设备的运动轨迹。

=== 设备管理模块需求分析

设备管理模块负责管理设备的配置信息，包括设备的名称、类型、位置等。用户可以通过这个模块添加、修改和删除设备的配置信息。具体来说，设备管理模块需要实现以下功能：

- 设备信息添加：用户可以通过这个模块添加设备的配置信息，包括设备名称、设备类型、设备位置等。
- 设备信息修改：用户可以通过这个模块修改设备的配置信息，包括设备名称、设备类型、设备位置等。
- 设备信息删除：用户可以通过这个模块删除设备的配置信息，同时关联的设备消息也会被删除。

== 非功能性需求分析

=== 性能需求

在确保系统的稳定性方面，我们的首要任务是避免系统崩溃。这是一个不可或缺的要求，因为崩溃会导致用户无法正常使用系统，造成极大的不便。

另外，我们的系统应该在当前主流的浏览器中能够正常运行。这意味着用户可以使用他们喜欢的浏览器来访问系统，而不必担心兼容性问题。

为了满足大量用户的需求，我们需要确保系统能够支持至少 1000 人的并发访问。这是一个重要的性能指标，以确保系统在高负载情况下仍然能够稳定运行。

系统对于用户的响应时间也是至关重要的。用户在登录和进行任何操作时，都希望系统能够迅速响应，反应时间应该在1秒以内。这可以提供良好的用户体验，让用户感到系统的高效性和流畅性。

在检测非正常情况方面，系统应该能够及时发现各种问题，如与设备的通信中断或无法连接到数据库服务器等情况。这可以帮助我们迅速处理问题，避免用户长时间等待和不必要的困扰。

页面加载速度也是一个重要的性能指标。通常情况下，每个页面应该在1秒内加载完毕，即使在高峰时期，也不应该超过5秒。这可以确保用户能够快速访问所需的信息，而不必浪费时间等待页面加载。

系统的稳定性还包括维护和重启的考虑。我们的目标是确保系统在一周内不超过一次维护和重启，以减少对用户的影响，同时保持系统的可用性。这将有助于提供连续的服务，让用户放心使用系统。

=== 输入输出需求

系统的输入主要来自用户的操作，包括登录、注册、修改个人信息、修改设备信息、查看设备信息等。这些操作都是通过网页表单来实现的，用户可以在表单中输入信息，然后通过点击按钮来提交表单。系统会对用户的输入进行验证，如果验证通过，就会执行相应的操作，否则会提示用户输入有误。

系统应该能够及时响应用户的操作，以确保用户能够及时得到反馈。这可以通过在网页中显示加载动画来实现，以告知用户系统正在处理请求。此外，系统还应该能够及时显示错误信息，以帮助用户纠正错误。

系统应不能被用户的非法输入所破坏，例如 SQL 注入攻击。为了防止这种情况的发生，我们需要对用户的输入进行严格的验证，确保用户的输入不会被误认为是 SQL 语句等等。

=== 数据管理需求

系统需要存储用户的个人信息、设备信息、设备数据等数据。这些数据应该能够长期保存，以便用户随时查看。此外，系统还应该能够及时更新数据，以确保数据的准确性。

为了保证数据的安全性，系统应该能够防止用户的非法访问。这可以通过对用户的身份进行验证来实现，例如在用户登录时，系统会验证用户的用户名和密码是否正确。此外，系统还应该能够防止用户的非法修改，例如在用户修改个人信息时，系统会验证用户的身份，以确保用户只能修改自己的信息。

系统的服务器软件必须提供可靠的数据备份和恢复手段。这意味着当服务器软件或硬件出现严重故障时，我们需要能够迅速恢复正常运行环境，依赖于备份的数据和账户信息。这是为了确保即使在不可预测的情况下，系统也能够保持数据的完整性和可用性。同时，我们非常重视系统的安全性，因此在系统中不会预留任何特殊账户和密码，以确保系统的账户信息的安全性。

系统还应具备一系列安全措施，包括加密登录和数据加密传输等。这些措施可以确保用户的数据在传输过程中得到保密和保护，防止数据在不同系统之间传输时遭到未经授权的访问。我们非常注重数据的保密性和安全性，以保障用户的隐私和数据的完整性。

=== 可维护性需求

系统应该具有良好的可维护性，以确保系统能够长期稳定运行。这可以通过以下几种方式来实现：

- 系统应该具有良好的可扩展性，以便在需要时能够轻松地添加新的功能。这可以通过使用模块化的设计来实现，例如将系统分为多个模块，每个模块负责一个特定的功能。这样，当我们需要添加新的功能时，我们只需要添加一个新的模块，而不必修改现有的模块。这可以大大减少系统的维护成本，提高系统的可维护性。
- 系统应该具有良好的可移植性，以便在需要时能够轻松地迁移到新的平台。这可以通过使用跨平台的技术来实现，例如使用 HTML、CSS 和 JavaScript 来开发前端界面，使用 Java 来开发后端接口。这样，我们可以轻松地将系统迁移到新的平台，而不必修改现有的代码。这可以大大减少系统的维护成本，提高系统的可维护性。
- 系统应该具有良好的可测试性，以便在需要时能够轻松地进行测试。这可以通过使用单元测试和集成测试来实现，例如使用 JUnit 来进行单元测试，使用 Postman 来进行集成测试。这样，我们可以轻松地对系统进行测试，而不必手动测试。这可以大大减少系统的维护成本，提高系统的可维护性。
- 系统应该具有良好的可读性，以便在需要时能够轻松地阅读和理解代码。这可以通过使用注释和文档来实现，例如在代码中添加注释，使用 Markdown 来编写文档。这样，我们可以轻松地阅读和理解代码，而不必猜测代码的含义。这可以大大减少系统的维护成本，提高系统的可维护性。
- 系统应该具有良好的可重用性，以便在需要时能够轻松地重用代码。这可以通过使用模块化的设计来实现，例如将系统分为多个模块，每个模块负责一个特定的功能。这样，我们可以轻松地重用代码，而不必重复编写代码。这可以大大减少系统的维护成本，提高系统的可维护性。

=== 硬件需求

- 操作系统：Windows 11、Linux、macOS
- 内存：4GB 以上
- 硬盘：100GB 以上
- CPU：Intel Core i5 以上
- 网络：100Mbps 以上

= 系统总体架构设计与技术选型

== 系统功能模块设计

- 游客模块
  - 用户管理模块
    - 用户注册
    - 用户登录

- 用户模块
  - 用户信息管理模块
    - 用户登录
    - 用户信息修改
    - 用户注销
    - 用户密码修改
    - 用户登出
  - 设备配置模块
    - 设备信息修改
    - 设备信息删除
    - 设备信息添加
  - 设备数据统计模块
    - 设备数据统计
    - 设备上报信息统计
    - 统计可视化
  - 设备数据查询模块
    - 设备数据查询
    - 设备数据可视化
    - 查询数据可视化

== 系统总体架构设计

系统的总体架构如下图所示，这是一个高度可扩展的架构，旨在支持多种终端的访问，包括PC和手机等。我们的服务端主要由两部分组成：后端服务器和MQTT服务器。这两部分分别与数据库进行交互，以实现系统的各项功能。

后端服务器具有处理来自网页的HTTP请求的能力，这意味着它可以接受用户在网页上发出的请求，并对其进行处理。这是用户与系统交互的主要接口之一，负责处理用户的请求并提供相应的数据和功能。

MQTT服务器则具有接受来自设备的报文并存储在数据库中的功能。这一部分是物联网设备与系统之间的关键连接，负责接收来自设备的数据，并将其存储在数据库中，以供后续的分析和使用。

#figure(
  image("assets/design/image.png", width: 80%)
)

后端功能：
- 处理用户的需求输入
- 与数据库进行交互
- 功能模块的实现

MQTT服务器功能：
- Broker 模块：接收来自设备的数据，并将其存储在数据库中

物联网设备功能：
- 发布模拟信号，用 mqtt 协议将数据告知服务器

=== 全栈架构设计

- 前端：用于构建用户界面，使用 AJAX 技术与后端控制层接口进行交互
- 后端：分层架构，用于处理用户的请求，调用业务层处理业务逻辑，然后将处理结果返回给用户
  - 控制层（ Controller ）：用于接收用户的请求，调用业务层处理业务逻辑，然后将处理结果返回给用户
  - 业务层（ Service ）：用于处理业务逻辑，例如对请求的数据进行验证、调用数据访问层与数据库进行交互等
  - 数据访问层（ DAO / Mapper ）：用于与数据库进行交互，例如对数据库进行增删改查等
  - 除此之外，还需要一个数据模型类（ Model ），用于封装数据，以便在各个层之间传递。同时，还需要一个工具类（ Util ），用于提供一些工具方法，例如对密码进行加密等。
- 数据库：用于存储数据，例如用户的个人信息、设备的配置信息、设备上报的数据等
- MQTT 服务器：用于接收设备上报的数据，并将其存储在数据库中
- 物联网设备：用于发布模拟信号，用 mqtt 协议与 MQTT 服务器进行通信

== 技术栈选择

- 前端技术栈
  - React
  - Ant Design
  - Recharts
  - 高德地图 JavaScript API
- 后端技术栈
  - Spring Boot
  - Spring MVC
  - Eclipse Paho
  - MyBatis
- 数据库技术栈
  - MySQL
- MQTT 服务器
  - Mosquitto
  - Eclipse Paho 模拟 MQTT 设备

=== 前端技术栈

选用 React 框架，使用 JavaScript 语言编写前端代码。React 是一个用于构建用户界面的 JavaScript 库，它可以帮助我们构建复杂的交互式 UI。React 采用组件化的设计思想，将 UI 拆分成一些独立的、可复用的组件，然后将这些组件组合起来，构成复杂的 UI。这种设计思想可以帮助我们提高代码的复用性，减少代码的冗余，提高开发效率。

同时，也使用了 Ant Design 的组件库，用于构建用户界面。Ant Design 是一个基于 React 的 UI 组件库，它提供了一系列的组件，可以帮助我们快速构建用户界面。Ant Design 的组件具有良好的可定制性，可以帮助我们快速构建用户界面，从而提高开发效率。

对于数据的可视化图表展示，选用 Recharts 组件库，使用 JavaScript 语言编写前端代码。Recharts 是一个基于 React 的图表库，它提供了一系列的图表组件，可以帮助我们快速构建图表。Recharts 的图表具有良好的可定制性，可以帮助我们快速构建图表，从而提高开发效率。

同时，也使用了高德地图的 JavaScript API，用于在网页中显示地图。高德地图是一个基于 Web 的地图服务，它提供了丰富的地图数据和功能，可以帮助我们在网页中显示地图，并在地图上添加标记、绘制轨迹等。

=== 后端技术栈

选用 Spring Boot 框架，使用 Java 语言编写后端代码。Spring Boot 是一个用于构建 Java 应用程序的框架，它可以帮助我们快速构建基于 Spring 的应用程序。Spring Boot 提供了一系列的工具和插件，可以帮助我们快速搭建应用程序的基本框架，从而提高开发效率。

同时，也使用了 Spring MVC 框架，用于构建后端接口。Spring MVC 是一个用于构建后端接口的框架，它提供了一系列的工具和插件，可以帮助我们快速构建后端接口，从而实现前后端的交互。Spring MVC 的接口具有良好的可定制性，可以帮助我们快速构建后端接口，从而提高开发效率。

同时，也使用了 Eclipse Paho 的 MQTT 客户端，用于与 MQTT 服务器进行通信。Eclipse Paho 是一个用于构建 MQTT 客户端的框架，它提供了一系列的工具和插件，可以帮助我们快速构建 MQTT 客户端，从而实现与 MQTT 服务器的通信。

同时，也使用了 MyBatis 的持久层框架，用于与数据库进行交互。MyBatis 是一个用于构建持久层的框架，它提供了一系列的工具和插件，可以帮助我们快速构建持久层，从而实现与数据库的交互。

=== 数据库技术栈

选用 MySQL 数据库，使用 SQL 语言编写数据库代码。MySQL 是一个开源的关系型数据库管理系统，它可以帮助我们存储和管理数据。MySQL 提供了一系列的工具和插件，可以帮助我们快速构建数据库，从而实现数据的存储和管理。

=== MQTT 服务器

选用 Mosquitto 服务器，用于接收设备上报的数据，并将其存储在数据库中。Mosquitto 是一个开源的 MQTT 服务器，它可以帮助我们接收设备上报的数据，并将其存储在数据库中。Mosquitto 提供了一系列的工具和插件，可以帮助我们快速构建 MQTT 服务器，从而实现与设备的通信。

同时，也使用了 Eclipse Paho 模拟 MQTT 设备，用于发布模拟信号，用 mqtt 协议与 MQTT 服务器进行通信。Eclipse Paho 模拟 MQTT 设备是一个开源的 MQTT 设备模拟器，它可以帮助我们发布模拟信号，用 mqtt 协议与 MQTT 服务器进行通信。

= 数据处理

== 数据存储

本项目使用 MySQL 数据库存储数据，根据 SQL 语言的标准、数据的来源、产生等，将数据导入数据库。

== 数据安全

为了确保数据的完整性和安全性，我们采取了一系列重要的数据保护措施。首先，数据不得进行未经授权的修改，这意味着只有经过授权的用户才能对数据进行修改。这可以防止数据在传输和存储过程中被篡改、挪用或丢失。我们使用一定的密码加密技术，如md5，来确保数据的保密性。这种加密技术可以将数据转化为不可读的形式，只有经过正确的解密过程才能恢复原始数据。这可以有效地保护数据的隐私和保密性。我们提供了身份验证功能，例如token等，以确保用户的身份可用性。这意味着只有经过身份验证的用户才能访问系统，并且只能访问其具有权限的数据和功能。这可以防止未经授权的用户访问系统和数据。

== 数据库设计及建表

本项目的数据库一共设计了 3 张表，分别是用户表、设备表和数据表。其中，用户表用于存储用户的个人信息，设备表用于存储设备的配置信息，数据表用于存储设备上报的数据。

=== 用户表

用户表用于存储用户的个人信息，包括用户名、密码、邮箱等。其中，用户名和邮箱是唯一的，这意味着用户名和邮箱在系统中不能重复。这可以确保用户的唯一性，防止用户重复注册。此外，用户的密码是经过加密的，这可以确保用户的密码不会被泄露。

#align(center)[#table(
    columns: 6,
    align: (col, row) => (auto, auto, auto, auto, auto, auto,).at(col),
    inset: 6pt,
    [字段名],[类型],[长度],[是否为空],[是否唯一],[备注],
    [uid],[int],[11],[否],[是],[主键，用户ID],
    [email],[varchar],[255],[否],[是],[邮箱],
    [username],[varchar],[255],[否],[是],[用户名],
    [password],[varchar],[255],[否],[否],[密码],
  )
]

建表语句如下：

```sql
create table user
(
    uid      int auto_increment
        primary key,
    email    varchar(255) not null,
    username varchar(255) not null,
    password varchar(255) not null,
    constraint user_pk2
        unique (username),
    constraint user_pk3
        unique (email)
);
```

=== 设备表

设备表用于存储设备的配置信息，包括设备ID、设备名称、设备类型等。其中，设备ID是唯一的，这意味着设备ID在系统中不能重复。这可以确保设备的唯一性，防止设备重复添加。此外，设备的位置是经过加密的，这可以确保设备的位置不会被泄露。

#align(center)[#table(
    columns: 6,
    align: (col, row) => (auto, auto, auto, auto, auto, auto,).at(col),
    inset: 6pt,
    [字段名],[类型],[长度],[是否为空],[是否唯一],[备注],
    [did],[int],[11],[否],[是],[主键，设备ID],
    [name],[varchar],[255],[否],[否],[设备名称],
    [type],[varchar],[255],[否],[否],[设备类型],
    [location],[varchar],[255],[否],[否],[设备位置],
    [status],[int],[11],[否],[否],[设备状态，默认为0，表示正常，1表示告警，2表示故障],
    [uid],[int],[11],[否],[否],[外键，用户ID，设备所属用户，与用户表关联，级联更新删除],
  )
]

建表语句如下：

```sql
create table device
(
    did      int auto_increment
        primary key,
    name     varchar(255)  not null,
    type     varchar(255)  null,
    location varchar(255)  null,
    status   int default 0 not null,
    uid      int           not null,
    constraint device_user_uid_fk
        foreign key (uid) references user (uid)
            on update cascade on delete cascade
);
```

=== 数据表

数据表用于存储设备上报的数据消息，包括设备ID、数据类型、数据值等。其中，设备ID是唯一的，这意味着设备ID在系统中不能重复。这可以确保设备的唯一性，防止设备重复添加。此外，数据的值是经过加密的，这可以确保数据的值不会被泄露。

#align(center)[#table(
    columns: 6,
    align: (col, row) => (auto, auto, auto, auto, auto, auto,).at(col),
    inset: 6pt,
    [字段名],[类型],[长度],[是否为空],[是否唯一],[备注],
    [mid],[int],[11],[否],[是],[主键，消息ID],
    [type],[int],[11],[否],[否],[消息类型，默认为0，表示正常，1表示告警，2表示故障],
    [status],[int],[11],[否],[否],[设备状态，默认为0，表示在线，1表示警告，2表示故障],
    [value],[int],[11],[否],[否],[数据值],
    [info],[varchar],[255],[否],[否],[数据信息],
    [lng],[double],[11],[否],[否],[经度],
    [lat],[double],[11],[否],[否],[纬度],
    [timestamp],[mediumtext],[11],[否],[否],[毫秒时间戳],
    [did],[int],[11],[否],[否],[外键，设备ID，与设备表关联，级联更新删除],
  )
]

建表语句如下：

```sql
create table message
(
    mid       int auto_increment
        primary key,
    type      int default 0 null,
    status    int default 0 not null,
    value     int           null,
    info      varchar(255)  null,
    lng       double        null,
    lat       double        null,
    timestamp mediumtext    not null,
    did       int           not null,
    constraint message_device_did_fk
        foreign key (did) references device (did)
            on update cascade on delete cascade
);
```

=== ER 图

#figure(
  image("assets/design/image-10.png", width: 100%)
)

= 系统接口设计

== 用户信息接口

=== 用户登录

- 接口地址：`/api/user/login`
- 请求方式：`POST`
- 请求参数：
  - `username`：用户名
  - `password`：密码
  - `remember`：是否记住登录状态
- 返回参数：
  - 成功：`"success"`
  - 失败：`"fail"`

=== 用户注销

- 接口地址：`/api/user/logout`
- 请求方式：`GET`
- 请求参数：无
- 返回参数：
  - 成功：`"success"`
  - 失败：`"fail"`

=== 用户注册

- 接口地址：`/api/user/register`
- 请求方式：`POST`
- 请求参数：
  - `username`：用户名
  - `password`：密码
  - `email`：电子邮件地址
- 返回参数：
  - 成功：`"success"`
  - 失败：`"fail"`

=== 用户删除

- 接口地址：`/api/user/delete`
- 请求方式：`POST`
- 请求参数：
  - `password`：密码
- 返回参数：
  - 成功：`"success"`
  - 失败：错误信息或`"fail"`

=== 验证用户名

- 接口地址：`/api/user/validateUsername`
- 请求方式：`GET`
- 请求参数：
  - `username`：用户名
- 返回参数：
  - 成功：`"success"`
  - 失败：`"fail"`

=== 验证电子邮件

- 接口地址：`/api/user/validateEmail`
- 请求方式：`GET`
- 请求参数：
  - `email`：电子邮件地址
- 返回参数：
  - 成功：`"success"`
  - 失败：`"fail"`

=== 获取用户信息

- 接口地址：`/api/user/info`
- 请求方式：`GET`
- 请求参数：无
- 返回参数：
  - 成功：用户信息
  - 失败：无

=== 更改用户名

- 接口地址：`/api/user/changeUsername`
- 请求方式：`POST`
- 请求参数：
  - `username`：新用户名
- 返回参数：
  - 成功：`"success"`
  - 失败：`"fail"`

=== 更改密码

- 接口地址：`/api/user/changePassword`
- 请求方式：`POST`
- 请求参数：
  - `oldPassword`：旧密码
  - `newPassword`：新密码
- 返回参数：
  - 成功：`"success"`
  - 失败：错误信息或`"fail"`

=== 更改电子邮件

- 接口地址：`/api/user/changeEmail`
- 请求方式：`POST`
- 请求参数：
  - `email`：新电子邮件地址
- 返回参数：
  - 成功：`"success"`
  - 失败：`"fail"`

== 设备信息接口

=== 获取设备列表

- 接口地址：`/api/device/list`
- 请求方式：`GET`
- 请求参数：无
- 返回参数：
  - 成功：设备列表
  - 失败：无

=== 添加设备

- 接口地址：`/api/device/add`
- 请求方式：`POST`
- 请求参数：
  - `Device` 对象（包含设备信息）
- 返回参数：
  - 成功：设备ID (`did`)
  - 失败：`"fail"`

=== 删除设备

- 接口地址：`/api/device/delete`
- 请求方式：`POST`
- 请求参数：
  - `Device` 对象（至少包含设备ID）
- 返回参数：
  - 成功：`"success"`
  - 失败：`"fail"`

=== 更新设备

- 接口地址：`/api/device/update`
- 请求方式：`POST`
- 请求参数：
  - `Device` 对象（包含更新后的设备信息）
- 返回参数：
  - 成功：`"success"`
  - 失败：`"fail"`

=== 获取设备概要信息

- 接口地址：`/api/device/briefInfo`
- 请求方式：`GET`
- 请求参数：无
- 返回参数：
  - 成功：概要信息对象（包含活跃设备数、非活跃设备数、设备总数）
  - 失败：无

== 设备数据接口

=== 获取总消息计数

- 接口地址：`/api/message/briefInfo`
- 请求方式：`GET`
- 请求参数：无
- 返回参数：
  - 成功：消息计数对象 (`MessageCount`)
  - 失败：无

=== 获取最近消息计数

- 接口地址：`/api/message/recentCount`
- 请求方式：`GET`
- 请求参数：无
- 返回参数：
  - 成功：最近7天的消息计数列表
  - 失败：无

=== 获取最新消息

- 接口地址：`/api/message/latest`
- 请求方式：`GET`
- 请求参数：无
- 返回参数：
  - 成功：最新消息列表
  - 失败：无

=== 获取最多消息的设备

- 接口地址：`/api/message/mostCount`
- 请求方式：`GET`
- 请求参数：无
- 返回参数：
  - 成功：设备的消息计数列表
  - 失败：无

=== 获取每个设备的最新消息

- 接口地址：`/api/message/latestDevice`
- 请求方式：`GET`
- 请求参数：无
- 返回参数：
  - 成功：每个设备的最新消息列表
  - 失败：无

=== 获取指定时间范围内的消息

- 接口地址：`/api/message/list`
- 请求方式：`GET`
- 请求参数：
  - `did`：设备ID
  - `beginTime`：开始时间（可选，默认为空）
  - `endTime`：结束时间（可选，默认为空）
- 返回参数：
  - 成功：指定时间范围内的消息列表
  - 失败：无

= 系统界面设计

最终的系统界面与本文档的原型设计基本一致，但是在实现过程中，我们可能对界面进行了一些调整，以提高用户的体验。

== 登录界面

#figure(
  image("assets/design/image-1.png", height: 45%)
)

== 注册界面

#figure(
  image("assets/design/image-2.png", height: 45%)
)

== 首页、设备数据统计可视化界面

#figure(
  image("assets/design/image-3.png", width: 80%)
)

== 用户信息管理界面

修改用户名与邮箱：

#figure(
  image("assets/design/image-4.png", width: 80%)
)

修改密码：

#figure(
  image("assets/design/image-5.png", width: 80%)
)

== 设备信息管理界面

信息展示：

#figure(
  image("assets/design/image-6.png", width: 80%)
)

添加设备：

#figure(
  image("assets/design/image-7.png", width: 60%)
)

修改、删除设备：

#figure(
  image("assets/design/image-8.png", width: 60%)
)

== 设备数据查询界面

#figure(
  image("assets/design/image-9.png", width: 80%)
)

= 系统出错处理

== 可能出现的系统错误

- 服务器错误：服务器出现故障，无法正常运行
- 网络错误：网络连接中断，无法正常访问
- 数据库错误：数据库出现故障，无法正常访问
- 设备错误：设备出现故障，无法正常访问

== 防范应急预案

=== 恢复系统

当系统出现故障时，我们需要尽快恢复系统，以确保系统能够正常运行。例如，当服务器出现故障时，我们需要尽快修复服务器，以确保系统能够正常运行。这可以通过备份服务器的数据和账户信息来实现，以便在服务器出现故障时，我们可以迅速恢复正常运行环境，依赖于备份的数据和账户信息。这是为了确保即使在不可预测的情况下，系统也能够保持数据的完整性和可用性。同时，我们非常重视系统的安全性，因此在系统中不会预留任何特殊账户和密码，以确保系统的账户信息的安全性。

=== 保护数据

当系统出现故障时，我们需要尽快保护数据，以确保数据能够正常使用。例如，当数据库出现故障时，我们需要尽快修复数据库，以确保数据能够正常使用。这可以通过备份数据库的数据来实现，以便在数据库出现故障时，我们可以迅速恢复正常运行环境，依赖于备份的数据。这是为了确保即使在不可预测的情况下，系统也能够保持数据的完整性和可用性。同时，我们非常重视数据的保密性和安全性，因此在数据库中不会存储任何敏感数据，以确保数据的保密性和安全性。

=== 定时备份

为了确保数据的完整性和安全性，我们需要定期备份数据。例如，我们可以每天备份一次数据，以确保数据的完整性和安全性。这可以通过使用备份软件来实现，例如使用 MySQL 的 mysqldump 命令来备份数据库。这是为了确保即使在不可预测的情况下，系统也能够保持数据的完整性和可用性。同时，我们非常重视数据的保密性和安全性，因此在数据库中不会存储任何敏感数据，以确保数据的保密性和安全性。

=== 定期维护

为了确保系统的稳定性和可用性，我们需要定期维护系统。例如，我们可以每周维护一次系统，以确保系统的稳定性和可用性。这可以通过使用维护软件来实现，例如使用 MySQL 的 mysqlcheck 命令来维护数据库。这是为了确保即使在不可预测的情况下，系统也能够保持数据的完整性和可用性。同时，我们非常重视数据的保密性和安全性，因此在数据库中不会存储任何敏感数据，以确保数据的保密性和安全性。

= 项目开发计划

// | 开发时间 | 开发内容 |
// | --- | --- |
// | 11.11 前 | 系统需求分析、总体架构设计、技术选型 |
// | 11.11 - 11.25 | 前端界面 UI 设计与开发 |
// | 11.25 - 12.09 | 数据库及后端接口设计与开发 |
// | 12.09 - 12.23 | 完成前端与后端的集成测试 |
// | 12.23 - 12.30 | 完成系统的部署与测试 |
// | 12.30 - 01.06 | 完成系统测试文档、用户手册等文档的编写 |
#align(center)[#table(
    columns: 2,
    align: (col, row) => (auto, auto,).at(col),
    inset: 6pt,
    [开发时间],[开发内容],
    [11.11 前],[系统需求分析、总体架构设计、技术选型],
    [11.11 - 11.25],[前端界面 UI 设计与开发],
    [11.25 - 12.09],[数据库及后端接口设计与开发],
    [12.09 - 12.23],[完成前端与后端的集成测试],
    [12.23 - 12.30],[完成系统的部署与测试],
    [12.30 - 01.06],[完成系统测试文档、用户手册等文档的编写],
  )
]